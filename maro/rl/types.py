# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.

from typing import List

import numpy as np


class State:
    """Convenience class to be used in an environment wrapper's post-step processing function.

    Args:
        state: Output of the environment wrapper's ``get_state``.
        action: Output of the ``AgentWrapper`` that interacts with environment wrapper.
        env_action: Output of the environment wrapper's ``to_env_action``.
        reward: Output of the environmet wrapper's ``get_reward``.
        next_state: The state immediately following ``state``.
        info: Output of the environment wrapper's ``get_transition_info``.
    """

    __slots__ = ["input", "meta"]

    def __init__(self, input: np.ndarray, meta=None):
        self.input = input
        self.meta = meta

    def 


class Transition:
    """Convenience class to be used in an environment wrapper's post-step processing function.

    Args:
        state: ``State`` object generated by the environment wrapper's ``get_state``.
        action: Output of the ``AgentWrapper`` that interacts with environment wrapper.
        env_action: Output of the environment wrapper's ``to_env_action``.
        reward: Output of the environmet wrapper's ``get_reward``.
        next_state: The state immediately following ``state``.
        info: Output of the environment wrapper's ``get_transition_info``.
    """

    __slots__ = ["state", "action", "env_action", "reward", "next_state", "info"]

    def __init__(self, state: State, action, env_action, reward, next_state: State, info):
        self.state = state
        self.action = action
        self.env_action = env_action
        self.reward = reward
        self.next_state = next_state
        self.info = info


